<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- context 是逆向工程的主要配置信息 -->
    <!-- id：起个名字 -->
    <!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 -->
    <context id="mysqlGenerator" defaultModelType="flat" targetRuntime="MyBatis3">
        <!--optional,指在创建class时，对注释进行控制-->
        <commentGenerator>
            <!--这个属性用来指定MBG生成的代码中是否包含任何注释 true：是 ： false:否 -->
            <!--警告：如果您将这个值设为true，那么所有的代码合并都会被禁用-->
            <property name="suppressAllComments" value="true"/>
            <!--这个元素用来指定生成的注释中是否包含生成的日期-->
            <property name="suppressDate" value="true"/>
            <!--JDK默认编码方式为GBK，我们要设置编码方式为UTF-8-->
            <property name="javaFileEncoding" value="UTF-8"/>
        </commentGenerator>
        <!-- 数据库链接URL，用户名、密码 TODO-->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://localhost:3306/zairui?serverTimezone=UTC"
                userId="root"
                password="Aoxiang2320">
            <!--如果您使用的是Connector / J的8.x版，您可能会注意到生成器尝试为MySql信息模式
            （sys，information_schema，performance_schema等）中的表生成代码。这可能不是
            您想要的！要禁用此行为，请将属性“nullCatalogMeansCurrent = true”添加到JDBC URL-->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>
        <!--非必须，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 -->
            <!-- 不是 double 和 long 类型 -->
            <!-- 使用常用的基本类型代替 sql 包下的引用类型 -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- targetPackage：生成的实体类所在的包 TODO-->
        <!-- targetProject：生成的实体类所在的硬盘位置 TODO-->
        <javaModelGenerator targetPackage="com.example.project1.pojo"
                            targetProject="src/main/java">
            <!-- 是否允许子包 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对modal添加构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>
        <!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 TODO-->
        <sqlMapGenerator targetPackage="com.example.project1.mapper"
                         targetProject="src/main/java">
            <!-- 针对数据库的一个配置，是否把 schema 作为字包名 -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
        <!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.example.project1.mapper"
                             targetProject="src/main/java">
            <!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>
        <!-- tableName是数据库中的表名，domainObjectName是生成的JAVA模型名，后面的参数不用改，要生成更多的表就在下面继续加table标签 -->
        <table tableName="insurances" domainObjectName="Insurances"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true"/>
        </table>
    </context>
</generatorConfiguration>